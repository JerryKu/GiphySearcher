{"version":3,"sources":["components/SearchBar/SearchBar.js","components/SearchResults/SearchResults.js","components/ImageModal/ImageModal.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","searchTerm","onChangeHandler","bind","onKeyDownHandler","e","this","setState","target","value","key","onSearch","className","type","onChange","onKeyDown","React","Component","SearchResults","imageResults","map","result","src","images","preview_gif","url","id","alt","title","onClick","onOpenModal","ImageModal","image","onCloseModal","original","App","axios","get","then","response","currentSearch","data","imageOffset","onLoadMore","currentResults","concat","selectedImage","document","body","classList","add","remove","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f74f4626.chunk.js","sourcesContent":["import React from 'react';\nimport { thisExpression } from '@babel/types';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchTerm: \"\"\n        }\n\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onKeyDownHandler = this.onKeyDownHandler.bind(this);\n    }\n\n    onChangeHandler(e) {\n        this.setState({\n            searchTerm: e.target.value\n        })\n    }\n\n    onKeyDownHandler(e){\n        if(e.key === 'Enter') {\n            this.props.onSearch(this.state.searchTerm);\n        }\n    }\n\n    render(){\n        return (\n            <div className=\"SearchBar\">\n                <input className=\"search-input\" type=\"text\" value={this.state.searchTerm} onChange={this.onChangeHandler} onKeyDown={this.onKeyDownHandler}/>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;\n","import React from 'react';\n\nclass SearchResults extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        return (\n            <div className=\"SearchResults\">\n                <div className=\"flex-wrapper\">\n                    {this.props.imageResults.map((result) => {\n                        return (\n                            <div className=\"gif-container\">\n                                <img className=\"gif-preview\" src={result.images.preview_gif.url} key={result.id} alt={result.title} onClick={()=>{this.props.onOpenModal(result)}}/>\n                                {result.title ? <div className=\"gif-title\">{result.title}</div> : <div>untitled</div>}\n                            </div>\n                        )\n                    } )}\n                </div>\n            </div>\n          );\n    }\n}\n\nexport default SearchResults;\n","import React from 'react';\n\nfunction ImageModal (props) {\n        return (\n            props.image.images ? (\n                <div className=\"image-modal-container\">\n                    <div className=\"dark-background\"></div>\n                    <span className=\"close-button\" onClick={props.onCloseModal}>X</span>\n                    <div className=\"image-modal-content\">\n                        <div className=\"modal-title\">{props.image.title}</div>\n                        <img className=\"modal-image\" src={props.image.images.original.url} alt={props.image.title}/>\n                        <div><span>URL: </span><input type=\"text\" value={props.image.url}></input></div>\n                    </div>\n                </div>\n            ) : <div></div>\n        )\n}\n\nexport default ImageModal;","import React from 'react';\nimport './App.scss';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport SearchResults from './components/SearchResults/SearchResults';\nimport ImageModal from './components/ImageModal/ImageModal';\n\nimport axios from 'axios';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentSearch: \"\",\n      imageResults: [],\n      imageOffset: 17,\n      selectedImage: {}\n    }\n  }\n\n  componentDidMount() {\n    axios.get('http://api.giphy.com/v1/gifs/trending?api_key=e5IHMLQpsdQwrtrQyJiDibOYStCTgm3T&limit=16')\n    .then((response) => {\n        this.setState({\n            imageResults: response.data.data\n        })\n    });\n  }\n\n  onSearch = (searchTerm) => {\n    let url;\n    if(searchTerm === \"\") {\n      url = 'http://api.giphy.com/v1/gifs/trending?api_key=e5IHMLQpsdQwrtrQyJiDibOYStCTgm3T&limit=16'\n    } else {\n      url = 'http://api.giphy.com/v1/gifs/search?api_key=e5IHMLQpsdQwrtrQyJiDibOYStCTgm3T&limit=16&q=' + searchTerm\n    }\n    axios.get(url)\n    .then((response)=> {\n      this.setState({\n          currentSearch: searchTerm,\n          imageResults: response.data.data,\n          imageOffset: 17\n      });\n    })\n  }\n\n  onLoadMore = () => {\n    let url;\n    if(this.state.currentSearch === \"\"){\n      url = 'http://api.giphy.com/v1/gifs/trending?api_key=e5IHMLQpsdQwrtrQyJiDibOYStCTgm3T&limit=16&offset=' +\n      this.state.imageOffset;\n    }else{\n      url = 'http://api.giphy.com/v1/gifs/search?api_key=e5IHMLQpsdQwrtrQyJiDibOYStCTgm3T&limit=16&offset=' +\n      this.state.imageOffset +\n     '&q=' + this.state.currentSearch;\n    }\n    axios.get(url)\n    .then((response)=> {\n      let currentResults = this.state.imageResults;\n      let imageOffset = this.state.imageOffset + 16;\n      currentResults = currentResults.concat(response.data.data)\n      this.setState({\n          imageResults: currentResults,\n          imageOffset: imageOffset\n      })\n    })\n  }\n\n  onOpenModal = (selectedImage) => {\n    document.body.classList.add('modal-open');\n    this.setState({\n      selectedImage: selectedImage\n    })\n  }\n\n  onCloseModal = () => {\n    document.body.classList.remove('modal-open');\n    this.setState({\n      selectedImage: {}\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <div className=\"nav-bar\">\n        <span className=\"logo\"><strong>Jerphy</strong></span>\n        <SearchBar onSearch={this.onSearch}/>\n        </div>\n        <SearchResults imageResults={this.state.imageResults} onOpenModal={this.onOpenModal}/>\n        <input className=\"load-more\" type=\"button\" value=\"Load More\" onClick={this.onLoadMore}></input>\n        <ImageModal image={this.state.selectedImage} onCloseModal={this.onCloseModal}/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}